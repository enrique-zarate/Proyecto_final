/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.*;

/**
 *
 * @author Mathias Ciancio - CO6607
 */
public class ManteEventoPonencia extends javax.swing.JInternalFrame {
    private ArrayList<Evento> listaEventos = new ArrayList<>();
    private ArrayList<Ponencia> listaPonencias = new ArrayList<>();
    private static final File EVENTO = new File("Evento.csv");
    private static final File PONENCIA = new File("Ponencias.csv");
    private static final File ORIGINAL = new File("EventoPonencia.csv");
    
    /**
     * Creates new form ManteEventoPonencia
     */
    public ManteEventoPonencia() {
        listaEventos = leerDocEventos(EVENTO);
        listaPonencias = leerDocPonencias(PONENCIA);
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCodEvento = new javax.swing.JLabel();
        txtCodEvento = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        lblCantPonDisp = new javax.swing.JLabel();
        txtEvento = new javax.swing.JTextField();
        txtCantPonDisp = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPonencias = new javax.swing.JTable();
        btnAsignar = new javax.swing.JButton();

        setClosable(true);
        setResizable(true);
        setTitle("AsignaciÃ³n de Ponencias a los Eventos");
        setPreferredSize(new java.awt.Dimension(800, 600));

        lblCodEvento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCodEvento.setText("Codigo de Evento: ");

        txtCodEvento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnBuscar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        lblCantPonDisp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCantPonDisp.setText("Cant. Ponencias Disponibles: ");

        txtEvento.setEditable(false);
        txtEvento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtCantPonDisp.setEditable(false);
        txtCantPonDisp.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        tablaPonencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Titulo", "Expositor", "Fecha", "Medio", "Asignar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaPonencias);
        if (tablaPonencias.getColumnModel().getColumnCount() > 0) {
            tablaPonencias.getColumnModel().getColumn(0).setMinWidth(30);
            tablaPonencias.getColumnModel().getColumn(0).setPreferredWidth(30);
            tablaPonencias.getColumnModel().getColumn(0).setMaxWidth(30);
            tablaPonencias.getColumnModel().getColumn(5).setMinWidth(50);
            tablaPonencias.getColumnModel().getColumn(5).setPreferredWidth(50);
            tablaPonencias.getColumnModel().getColumn(5).setMaxWidth(50);
        }

        btnAsignar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAsignar.setText("Asignar");
        btnAsignar.setEnabled(false);
        btnAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblCodEvento))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtCodEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblCantPonDisp)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtCantPonDisp, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(btnAsignar))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCodEvento)
                    .addComponent(txtCodEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCantPonDisp))
                    .addComponent(txtCantPonDisp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAsignar)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String cod_evento = txtCodEvento.getText();
        Evento even;
        long dias;
        if(!verificarCamposCargados(cod_evento)){
            int cod = Integer.parseInt(cod_evento);
            try {
                even = buscarEvento(cod);
                txtEvento.setText(even.toString());
                dias = calcularDiasEntreFechas(even.getFechaDesde(),even.getFechaHasta());
                int cantDias = (int)dias - even.getListaPonencias().size();
                txtCantPonDisp.setText(String.valueOf(cantDias));
                mostrarDatosEnTabla(even.getFechaDesde(), even.getFechaHasta());
                txtCodEvento.setEditable(false);
                btnAsignar.setEnabled(true);
            } catch (ExcepcionEventoNoEncontrado ex) {
                Logger.getLogger(ManteEventoPonencia.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignarActionPerformed
        Evento even;
        Ponencia pon;
        int id_pon;    
        String cod_evento = txtCodEvento.getText();
        int cod_even = Integer.parseInt(cod_evento);
        int cantPonDisp = Integer.parseInt(txtCantPonDisp.getText());
        int cantAsignar = 0;
        for (int i = 0; tablaPonencias.getRowCount() > i; i++) {
            if( tablaPonencias.getValueAt(i, 5) == Boolean.TRUE ){
                cantAsignar += 1;
            }
        }
        if(cantAsignar <= cantPonDisp && cantAsignar != 0){
            try {
                even = buscarEvento(cod_even);
                for (int i = 0; tablaPonencias.getRowCount() > i; i++) {
                    if( tablaPonencias.getValueAt(i, 5) == Boolean.TRUE ){
                        try {
                            id_pon = (Integer)tablaPonencias.getValueAt(i,0);
                            pon = buscarPonencia(id_pon); 
                            
                            //Cuidado que aca hay que filtrar que la ponencia que esta ahora, no tiene que tener misma fecha que lo que este agregado entre las ponencias del evento
                            
                            even.asignarPonencias(pon);
                            listaPonencias.remove(pon);
                            //ActualizarEvento(EVENTO, id, "GRABAR"); Tiene que actualizar el doc de eventos con el nuevo size de su arraylist de ponencias
                            //ActualizarPonencia(PONENCIA,id,"GRABAR); Tiene que actualizar el doc de ponencias con el nuevo dato ESTADO para que quede en "U"
                            /*ActualizarEvtPon(ORIGINAL,id,"GRABAR"); Tiene que actualizar el Doc, donde iria: 
                              El Evento
                                Ponencia
                                Ponencia.
                              Otro Evento...
                            
                            La tecnica seria que copie todo en un auxiliar hasta toparse con el evento que tiene que actualizar, y ahi ir poniendo las ponencias nuevas del evento, respetando las que ya estan cargadas
                            */
                        } catch (ExcepcionPonenciaNoEncontrada ex) {
                            Logger.getLogger(ManteEventoPonencia.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                btnBuscar.doClick();                
            } catch (ExcepcionEventoNoEncontrado ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),"Alerta", JOptionPane.ERROR_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "No se marcaron ponencias o se marcaron mÃ¡s de lo disponible por el evento.","Alerta", JOptionPane.ERROR_MESSAGE);
        }
       
    }//GEN-LAST:event_btnAsignarActionPerformed

    private boolean verificarCamposCargados(String cod){  
        boolean error = false;
 
        if ( cod.equalsIgnoreCase("") ){
            JOptionPane.showMessageDialog(this, "No se puede iniciar la busqueda sin un filtro.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            error = true;
        }
        return error;
    }
    
    private long calcularDiasEntreFechas(String fecDesde, String fecHasta){
        DateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;     
        formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        //Parsing
	LocalDate desde = LocalDate.parse(fecDesde, formatter);
	LocalDate hasta = LocalDate.parse(fecHasta, formatter);
		
	//Calcula los dias entre fechas
	long dias = ChronoUnit.DAYS.between(desde, hasta);
	
        return dias;	
    }
    
    
    public Evento buscarEvento(int cod) throws ExcepcionEventoNoEncontrado{      
        Evento busqueda = null;
        listaEventos = leerDocEventos(EVENTO);
        if (!listaEventos.isEmpty()){
            for(Evento evt : listaEventos){
          
                if ( cod == evt.getCodigoEvento() ){
                    busqueda = evt;
                    break;
                }
            }
            if (busqueda != null){
                return busqueda;
            }
            else{
                JOptionPane.showMessageDialog(this, "El Evento no existe.", "Alerta", JOptionPane.ERROR_MESSAGE);
                throw( new ExcepcionEventoNoEncontrado() );
            }
        }else{
            JOptionPane.showMessageDialog(this, "El archivo esta vacio.","Alerta", JOptionPane.ERROR_MESSAGE);
        }
        return busqueda;
    }
    
    public Ponencia buscarPonencia(int cod) throws ExcepcionPonenciaNoEncontrada{      
        Ponencia busqueda = null;
        listaPonencias = leerDocPonencias(PONENCIA);
        if (!listaPonencias.isEmpty()){
            for(Ponencia pon : listaPonencias){
          
                if ( cod == pon.getCodigo_ponencia() ){
                    busqueda = pon;
                    break;
                }
            }
            if (busqueda != null){
                return busqueda;
            }
            else{
                JOptionPane.showMessageDialog(this, "El Evento no existe.", "Alerta", JOptionPane.ERROR_MESSAGE);
                throw( new ExcepcionPonenciaNoEncontrada() );
            }
        }else{
            JOptionPane.showMessageDialog(this, "El archivo esta vacio.","Alerta", JOptionPane.ERROR_MESSAGE);
        }
        return busqueda;
    }
    
    
    
    
    private void mostrarDatosEnTabla(String desde, String hasta){
        String titulos[] = {"ID","Titulo","Expositor","Fecha","Medio","Asignar"};
        DefaultTableModel modelo = new DefaultTableModel(null,titulos){
            Class[] types = new Class [] {
            java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            };    
        };
        if (!listaPonencias.isEmpty()){
            for(Ponencia p : listaPonencias){
                if(p != null){
                    if(p.getFechaRealizacion().compareTo(desde) >= 0 && p.getFechaRealizacion().compareTo(hasta)<= 0){
                        Object campos[] = new Object[6];
                        campos[0] = p.getCodigo_ponencia();
                        campos[1] = p.getTituloPonecia();
                        campos[2] = p.getNombreInvestigador();                      
                        campos[3] = p.getFechaRealizacion();                    
                        campos[4] = p.getMedio();
                        campos[5] = Boolean.FALSE;
                        modelo.addRow(campos);
                    }
                }
                tablaPonencias.setModel(modelo);
            }
        }
        else{
            JOptionPane.showMessageDialog(this, "El archivo esta vacio.","Alerta", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    
    
    
    
    
    
    
    
    private ArrayList leerDocEventos(File archivo){
        ArrayList<Evento> eventos = new ArrayList<>();
        Evento evt;
        int cod;
        try{            
            if (archivo.exists()){
                FileReader fr = new FileReader(archivo);
                BufferedReader br = new BufferedReader(fr);
                String linea = br.readLine();
                while(linea != null){
                    String split[] = linea.split(Pattern.quote("|"),7);
                    cod = Integer.decode(split[0]);
                    evt = new Evento(cod, split[1], split[2], split[3], split[4] );                    
                    
                    //Split[5] es la columna de Estado
                    if( split[5].equalsIgnoreCase("A")){
                        eventos.add(evt);
                    }
                
                    linea = br.readLine();
                }
                br.close();
            }
            else{
                JOptionPane.showMessageDialog(this, "Se crearÃ¡ un archivo nuevo vacÃ­o.", "Alerta", JOptionPane.ERROR_MESSAGE);
            }
        }catch(IOException e){
            JOptionPane.showMessageDialog(this, e.getMessage(),"Alerta", JOptionPane.ERROR_MESSAGE);
         
        }
        Collections.sort(eventos);    
        return eventos;
    }
    
    
    private ArrayList leerDocPonencias(File archivo){
        ArrayList<Ponencia> ponencias = new ArrayList<>();
        Ponencia pon;
        int cod;
        try{            
            if (archivo.exists()){
                FileReader fr = new FileReader(archivo);
                BufferedReader br = new BufferedReader(fr);
                String linea = br.readLine();
                while(linea != null){
                    String split[] = linea.split(Pattern.quote("|"),7);
                    cod = Integer.decode(split[0]);
                    pon = new Ponencia(cod, split[1], split[2], split[3], split[4], split[5] );                    
                   
                    //Split[6] es la columna de Estado
                    if(split[6].equalsIgnoreCase("N")){//Aqui solo va a traer las ponencias que no fueron asignadas aun a ningun evento
                        ponencias.add(pon);
                    }                
                    linea = br.readLine();
                }
                br.close();
            }
            else{
                JOptionPane.showMessageDialog(this, "Se crearÃ¡ un archivo nuevo vacÃ­o.", "Alerta", JOptionPane.ERROR_MESSAGE);
            }
        }catch(IOException e){
            JOptionPane.showMessageDialog(this, e.getMessage(),"Alerta", JOptionPane.ERROR_MESSAGE);
         
        }
        Collections.sort(ponencias);    
        return ponencias;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAsignar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCantPonDisp;
    private javax.swing.JLabel lblCodEvento;
    private javax.swing.JTable tablaPonencias;
    private javax.swing.JTextField txtCantPonDisp;
    private javax.swing.JTextField txtCodEvento;
    private javax.swing.JTextField txtEvento;
    // End of variables declaration//GEN-END:variables
}
